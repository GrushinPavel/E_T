# -*- coding: utf-8 -*-
"""упражнения.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LJsBsSAQxtP57vo8YWncWaPybKjpSDOS

Этот проект написан для помощи людям, которые занимаются фитнесом и хотят получить список упражнений для определенных мышц.
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Создание данных
age = np.random.randint(18, 80, size=100)
gender = np.random.choice(['M'], size=100)
height = np.random.normal(170, 10, size=100)
weight = np.random.normal(70, 10, size=100)
result = np.random.normal(50, 10, size=100)

data = pd.DataFrame({'age': age, 'gender': gender, 'height': height, 'weight': weight, 'result': result})

# Просмотр первых 5 строк данных
print(data.head())

# Визуализация распределения возраста
sns.histplot(data=data, x='age', bins=10)
plt.title('Распределение возраста')
plt.show()

# Визуализация зависимости результата от роста и веса
sns.scatterplot(data=data, x='height', y='weight', hue='result')
plt.title('Зависимость результата от роста и веса')
plt.show()

# Подготовка данных для обучения модели
X = data[['age', 'gender', 'height', 'weight']]
X = pd.get_dummies(X, columns=['gender'])
y = data['result']

# Разделение данных на обучающую и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Обучение модели линейной регрессии
model = LinearRegression()
model.fit(X_train, y_train)

# Оценка модели на тестовой выборке
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print('Среднеквадратичная ошибка:', mse)
print('Коэффициент детерминации:', r2)

# Использование модели для прогнозирования результата занятий
new_data = pd.DataFrame({'age': [30], 'gender': ['M'], 'height': [180], 'weight': [80]})
new_data = pd.get_dummies(new_data, columns=['gender'])
result = model.predict(new_data)
print('Прогноз результата:', result)

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Создание данных
age = np.random.randint(18, 80, size=100)
gender = np.random.choice(['М'], size=100)
height = np.random.normal(170, 10, size=100)
weight = np.random.normal(70, 10, size=100)
result = np.random.normal(50, 10, size=100)

data = pd.DataFrame({'age': age, 'gender': gender, 'height': height, 'weight': weight, 'result': result})

# Просмотр первых 5 строк данных
print(data.head())

# Визуализация распределения возраста
sns.histplot(data=data, x='age', bins=10)
plt.title('Распределение возраста')
plt.show()

# Визуализация зависимости результата от роста и веса
sns.scatterplot(data=data, x='height', y='weight', hue='result')
plt.title('Зависимость результата от роста и веса')
plt.show()

# Подготовка данных для обучения модели
X = data[['age', 'gender', 'height', 'weight']]
X = pd.get_dummies(X, columns=['gender'])
y = data['result']

# Разделение данных на обучающую и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Обучение модели линейной регрессии
model = LinearRegression()
model.fit(X_train, y_train)

# Оценка модели на тестовой выборке
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print('Среднеквадратичная ошибка:', mse)
print('Коэффициент детерминации:', r2)

# Использование модели для прогнозирования результата занятий
new_data = pd.DataFrame({'age': [30], 'gender': ['М'], 'height': [180], 'weight': [80]})
new_data = pd.get_dummies(new_data, columns=['gender'])
result = model.predict(new_data)
print('Прогноз результата:', result)

# Создание списка упражнений
exercises = ['Приседания', 'Отжимания', 'Планка', 'Бег на месте', 'Шаги на месте']

# Вывод списка упражнений
print('Список упражнений:')
for exercise in exercises:
    print(exercise)

# Создание словаря с описанием упражнений
exercise_desc = {'Приседания': 'Приседания - это упражнение для мышц ног и ягодиц. Стоя на прямых ногах, нужно медленно опуститься вниз, сгибая колени, и затем медленно подняться вверх.',
                 'Отжимания': 'Отжимания - это упражнение для мышц груди, плеч и рук. Нужно лечь на пол, положив ладони на ширине плеч, и медленно опуститься вниз, сгибая локти, и затем медленно подняться вверх.',
                 'Планка': 'Планка - это упражнение для мышц кора и спины. Нужно лечь на пол, положив локти на пол и вытянув ноги назад, и держать тело в прямой линии в течение нескольких секунд.',
                 'Бег на месте': 'Бег на месте - это упражнение для кардио-сосудистой системы. Нужно просто бегать на месте, поднимая колени как можно выше.',
                 'Шаги на месте': 'Шаги на месте - это упражнение для кардио-сосудистой системы. Нужно просто делать шаги на месте, поднимая колени как можно выше.'}

# Вывод описания упражнений
print('Описание упражнений:')
for exercise in exercises:
    print(exercise + ': ' + exercise_desc[exercise])

# Создание списка упражнений для укрепления мышц спины
back_exercises = ['Гиперэкстензия', 'Тяга верхнего блока', 'Тяга нижнего блока']

# Добавление упражнений для укрепления мышц спины в словарь с описанием упражнений
exercise_desc['Гиперэкстензия'] = 'Гиперэкстензия - это упражнение для мышц спины. Нужно лечь на живот на специальном тренажере, положив руки на грудь или за голову, и медленно поднимать верхнюю часть тела вверх, сгибая спину.'
exercise_desc['Тяга верхнего блока'] = 'Тяга верхнего блока - это упражнение для мышц спины и плеч. Нужно сидеть на тренажере, захватив рукоятки, и медленно тянуть их к груди, сгибая локти и напрягая мышцы спины и плеч.'
exercise_desc['Тяга нижнего блока'] = 'Тяга нижнего блока - это упражнение для мышц спины и ног. Нужно стоять на коленях перед тренажером, захватив рукоятки, и медленно тянуть их к себе, сгибая локти и напрягая мышцы спины и ног.'

# Вывод списка упражнений для укрепления мышц спины
print('Упражнения для укрепления мышц спины:')
for exercise in back_exercises:
    print(exercise)

# Вывод описания упражнений для укрепления мышц спины
print('Описание упражнений для укрепления мышц спины:')
for exercise in back_exercises:
    print(exercise + ': ' + exercise_desc[exercise])

# Создание словаря с описанием упражнений
exercise_desc = {'Приседания': 'Приседания - это упражнение для мышц ног и ягодиц. Стоя на прямых ногах, нужно медленно опуститься вниз, сгибая колени, и затем медленно подняться вверх.',
                 'Отжимания': 'Отжимания - это упражнение для мышц груди, плеч и рук. Нужно лечь на пол, положив ладони на ширине плеч, и медленно опуститься вниз, сгибая локти, и затем медленно подняться вверх.',
                 'Планка': 'Планка - это упражнение для мышц кора и спины. Нужно лечь на пол, положив локти на пол и вытянув ноги назад, и держать тело в прямой линии в течение нескольких секунд.',
                 'Бег на месте': 'Бег на месте - это упражнение для кардио-сосудистой системы. Нужно просто бегать на месте, поднимая колени как можно выше.',
                 'Шаги на месте': 'Шаги на месте - это упражнение для кардио-сосудистой системы. Нужно просто делать шаги на месте, поднимая колени как можно выше.'}

# Создание словаря с упражнениями для каждой мышцы
muscle_exercises = {'Ноги': ['Приседания', 'Выпады', 'Жим ногами'],
                    'Грудь': ['Отжимания', 'Жим гантелей лежа', 'Жим гантелей стоя'],
                    'Спина': ['Гиперэкстензия', 'Тяга верхнего блока', 'Тяга нижнего блока'],
                    'Руки': ['Отжимания', 'Подтягивания', 'Жим гантелей'],
                    'Плечи': ['Жим гантелей стоя', 'Жим штанги стоя', 'Подъемы гантелей']}

# Вывод списка мышц
print('Список мышц:')
for muscle in muscle_exercises.keys():
    print(muscle)

# Запрос у пользователя выбора мышцы
muscle_choice = input('Выберите мышцу, для которой нужны упражнения: ')

# Проверка, есть ли такая мышца в словаре
if muscle_choice in muscle_exercises.keys():
    # Вывод списка упражнений для выбранной мышцы
    print('Упражнения для ' + muscle_choice + ':')
    for exercise in muscle_exercises[muscle_choice]:
        print(exercise)
    
    # Запрос у пользователя добавления новых упражнений
    add_exercises = input('Хотите добавить новые упражнения для ' + muscle_choice + '? (да/нет): ')
    if add_exercises.lower() == 'да':
        # Запрос у пользователя ввода новых упражнений
        new_exercises = input('Введите новые упражнения через запятую: ')
        new_exercises_list = new_exercises.split(',')
        
        # Добавление новых упражнений в словарь с описанием упражнений
        for exercise in new_exercises_list:
            exercise_desc[exercise.strip()] = exercise.strip() + ' - это упражнение для ' + muscle_choice.lower() + '.'
        
        # Добавление новых упражнений в словарь с упражнениями для выбранной мышцы
        muscle_exercises[muscle_choice].extend(new_exercises_list)
        
        # Вывод обновленного списка упражнений для выбранной мышцы
        print('Обновленный список упражнений для ' + muscle_choice + ':')
        for exercise in muscle_exercises[muscle_choice]:
            print(exercise)
    else:
        print('Список упражнений не обновлен.')
else:
    print('Такой мышцы нет в списке.')

"""В примере кода, который я привел выше, были использованы следующие библиотеки:

- pandas - для работы с данными в виде таблицы;

- numpy - для работы с числовыми данными;

- seaborn - для визуализации данных;

- matplotlib - для создания графиков и диаграмм;

- scikit-learn - для обучения модели машинного обучения и оценки ее качества.

Эти библиотеки широко используются в анализе данных и машинном обучении, и могут быть полезными для IT ассистента, который работает с данными и анализирует их.
"""